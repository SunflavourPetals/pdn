integer_literals_test: {
	dec: [
		1,
		2,
		3,
		99,
		1111,
		123456789,
		2147483647,
	];
	oct: [
		0,
		1,
		2,
		3,
		7,
		63,
		511,
		511,
		134217727,
		2147483647,
	];
	bin: [
		0,
		1,
		0,
		1,
		240,
		240,
		2147483647,
	];
	hex: [
		0,
		1,
		65530,
		65244,
		i64: 2882400255,
		i64: 2882400255,
		i64: 2882400255,
		i64: 2882400255,
		2147483647,
	];
};
floating_points_test: {
	dec: [
		0.0,
		10.05,
		1.0,
		100.5,
		0.1,
		0.0,
		0.0,
		100.0,
		1000.0,
		1000.0,
		1000.0,
		1000.0,
		0.001,
		1123.0,
		1213.0,
		1312.0,
		0.001321,
		50.9,
		40.9,
		30.9,
		2.06e-122,
	];
	hex: [
		21.0,
		21.5,
		1.0,
		1.0,
		591292919689.6711,
		31.984375,
	];
};
character_test: {
	character: [
		'A',
		'a',
		'あ',
		'Δ',
		'我',
		'♥',
		'U',
		'🍌',
		'\"',
		'爱',
		'愛',
		'🥰',
	];
	escape: {
		sample: [
			'\'',
			'\"',
			'?',
			'\\',
			'\a',
			'\b',
			'\f',
			'\n',
			'\r',
			'\t',
			'\v',
		];
		oct: [
			'\0',
			'A',
			'0',
			'0',
			'£',
			'ǿ',
		];
		oct_with_curly_brackets: [
			'\0',
			'A',
			'A',
			'0',
			'0',
			'£',
			'爱',
			'爱',
			'愛',
			'愛',
			'🥰',
			{
				cannot_show: [
					'􏿿',
					'􏿿',
				];
			},
		];
		hex: [
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'A',
			'A',
			'a',
			'a',
			'爱',
			'爱',
			'愛',
			'愛',
			'🥰',
			'🥰',
			{
				cannot_show: [
					'\0',
					'\0',
					'􏿿',
					'􏿿',
				];
			},
		];
		hex_with_curly_brackets: [
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'A',
			'A',
			'a',
			'a',
			'爱',
			'爱',
			'愛',
			'愛',
			'🥰',
			'🥰',
			{
				cannot_show: [
					'\0',
					'\0',
					'􏿿',
					'􏿿',
				];
			},
		];
		universal_u: [
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'\0',
			'A',
			'a',
			'爱',
			'愛',
			{
				cannot_show: [
					'\0',
				];
			},
		];
		universal_u_with_curly_brackets: [
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'A',
			'A',
			'a',
			'a',
			'爱',
			'爱',
			'愛',
			'愛',
			'🥰',
			'🥰',
			{
				cannot_show: [
					'\0',
					'\0',
					'􏿿',
					'􏿿',
				];
			},
		];
		universal_U: [
			'0',
			'1',
			'2',
			'3',
			'4',
			'5',
			'6',
			'7',
			'8',
			'9',
			'\0',
			'A',
			'a',
			'爱',
			'愛',
			'愛',
			'🥰',
			'🥰',
			{
				cannot_show: [
					'\0',
					'􏿿',
					'􏿿',
					'􏿿',
				];
			},
		];
	};
};
string_test: {
	string: [
		"",
		"I\'m string",
		"我是字符串",
		"🍌🥑🍓",
	];
	raw_string: [
		"",
		"\"(.\\test\\features_test.pdn)\"",
		"\\0\\a\\b\\f\\r\\n",
		"\"(.\\test\\features_test.pdn\n\t\t\tnew line!\n\t\t\tnew line 2!)\"",
	];
	raw_string_delimiter: [
		"",
		"🍓num",
		"signs 1🍓",
		"signs🍓2",
		"uppercase🍓letters 1",
		"lowercase letters🍓1",
		"uppercase letters🍓2",
		"lowercase🍓letters 2",
	];
	escape: {
		sample: [
			"\'\"?\\\a\b\f\n\r\t\v",
		];
		oct: [
			"\0A00£ǿ",
			"\07A70807£7ǿ777",
		];
		oct_with_curly_brackets: [
			"Aa01",
		];
		hex: [
			"Aa01",
		];
		hex_with_curly_brackets: [
			"Aa01",
		];
		universal_u: [
			"Aa01",
		];
		universal_u_with_curly_brackets: [
			"Aa01",
		];
		universal_U: [
			"Aa01",
		];
	};
};
bool_test: {
	true: @true;
	false: @false;
	bool_1: @true;
	bool_2: @false;
	bool_3: @true;
	bool_4: @false;
};
list_test: {
	list_1: [
		[
			[
				[],
			],
		],
		[],
		[
			[],
		],
		[
			[],
			[],
			[],
		],
		[],
	];
	list_2: [
		1,
		2,
		3,
		@true,
		1.0,
		0.0,
		1e+05,
		2.0,
		'C',
		"String",
	];
};
object_test: {
	object: {
		a: {
			a: {
				a: {};
				b: {};
			};
		};
		b: {};
		c: {};
	};
};
at_value_test: {
	true: @true;
	false: @false;
	e: 2.718281828459045;
	log2e: 1.4426950408889634;
	log10e: 0.4342944819032518;
	pi: 3.141592653589793;
	inv_pi: 0.3183098861837907;
	inv_sqrtpi: 0.5641895835477563;
	ln2: 0.6931471805599453;
	ln10: 2.302585092994046;
	sqrt2: 1.4142135623730951;
	sqrt3: 1.7320508075688772;
	inv_sqrt3: 0.5773502691896257;
	egamma: 0.5772156649015329;
	phi: 1.618033988749895;
	inifinity: @inf;
	inf: @inf;
	quiet_NaN: @NaN;
	qNaN: @NaN;
	qnan: @NaN;
	NaN: @NaN;
	nan: @NaN;
	signaling_NaN: @NaN;
	sNaN: @NaN;
	snan: @NaN;
	extra: {
		π: 3.141592653589793;
		γ: 0.5772156649015329;
		Φ: 1.618033988749895;
		hello: "Hello, world!";
		inf: @inf;
		fib_10_list: [
			1,
			1,
			2,
			3,
			5,
			8,
			13,
			21,
			34,
			55,
		];
		me_object: {
			name: "PDN";
			date: {
				y: 2024;
				m: 12;
				d: 21;
			};
		};
	};
};
sign_test: [
	1,
	1,
	1,
	1,
	1,
	-1,
	1,
	-1,
	1,
	1,
	-1,
	-1,
	1,
	1,
	-1,
	1.0,
	1.0,
	1.0,
	1.0,
	1.0,
	-0.1,
	0.1,
	-0.1,
	0.1,
	0.1,
	-0.0,
	-0.0,
	0.0,
	0.0,
	-0.0,
	@inf,
	-@inf,
];
type_assignment_test: {
	object: {
		a: 0;
		b: 0;
		c: u32 0;
		d: u32 0;
		e: i8 0;
		f: i16 0;
		g: 0;
		h: i64 0;
		i: u8 0;
		j: u16 0;
		k: u32 0;
		l: u64 0;
		m: f32 0.0;
		n: 0.0;
		o: f32 0.0;
		p: f32 0.0;
		q: 0.0;
		r: @true;
		s: @false;
		t: 'c';
		u: 'c';
		v: 'c';
		w: "s";
		x: "str";
		y: "string";
		z: [];
		A: {};
		B: {};
	};
	list: [
		0,
		0,
		u32: 0,
		u32: 0,
		i8: 0,
		i16: 0,
		0,
		i64: 0,
		u8: 0,
		u16: 0,
		u32: 0,
		u64: 0,
		f32: 0.0,
		0.0,
		f32: 0.0,
		f32: 0.0,
		0.0,
		@true,
		@false,
		'c',
		'c',
		'c',
		"s",
		"str",
		"string",
		[],
		{},
		{},
	];
};
cast_test: {
	object: {
		to_i8: i8 123;
		to_i16: i16 30000;
		to_i32: 0;
		to_i64: i64 99999;
		to_u8: u8 255;
		to_u16: u16 65535;
		to_u32: u32 99999;
		to_u64: u64 99999;
		to_f32_1: f32 100.0;
		to_f32_2: f32 1.0;
		to_f64: 0.0;
		to_bool_1: @true;
		to_bool_2: @false;
		to_bool_3: @true;
		to_bool_4: @true;
		to_bool_5: @true;
		to_bool_6: @false;
		to_bool_7: @false;
		to_bool_8: @true;
		to_bool_9: @true;
		to_bool_10: @true;
	};
	list: [
		i8: 123,
		i16: 30000,
		0,
		i64: 99999,
		u8: 255,
		u16: 65535,
		u32: 99999,
		u64: 99999,
		f32: 100.0,
		f32: 1.0,
		0.0,
		@true,
		@false,
		@true,
		@true,
		@true,
		@false,
		@false,
		@true,
		@true,
		@true,
	];
};
type_deducing_test: {
	int_uint: {
		id_1: 2147483647;
		id_2: i64 2147483648;
		id_3: i64 9223372036854775807;
		id_4: u64 9223372036854775808;
		id_5: u64 18446744073709551615;
		id_6: 2147483647;
		id_7: i64 2147483648;
		id_8: i64 9223372036854775807;
		id_9: u64 9223372036854775808;
		id_A: u64 18446744073709551615;
	};
	floating_point: {
		fp1: 0.0;
		fp2: 0.0;
		fp3: 0.0;
		fp4: 0.0;
		fp5: 321.123;
		fp6: 1.0;
		fp7: 0.0;
		fp8: 0.0;
		fp9: 1e+09;
		fpa: 0.0;
		fpb: 0.11;
		fpc: 8355840.0;
		fpd: 11.0;
		fpe: 0.4375;
		fpf: 1.0;
	};
	string: {
		s1: "string";
		s2: "string\n";
		s3: "s";
		s4: "";
		s5: "raw string \\\\ RAW STRING";
		s6: "";
		s7: "";
		s8: "";
	};
	character: {
		c1: '\0';
		c2: '\0';
		c3: 'C';
		c4: 'c';
		c5: '\0';
		c6: '\0';
		c7: '😶';
		c8: '😊';
	};
	boolean: {
		bool_1: @true;
		bool_2: @false;
		bool_3: @true;
		bool_4: @false;
	};
	list: {
		list1: [];
		list2: [];
		list3: [
			[],
		];
		list4: [
			1,
			2,
			3,
			4,
			5,
			1.0,
			0.2,
			3.0,
			4.0,
			5.0,
			"",
			"",
			' ',
			@true,
			@false,
			@inf,
			@NaN,
			[],
			{},
			[],
			{},
		];
	};
	object: {
		obj1: {};
		obj2: {};
		obj3: {};
		obj4: {
			a: 1;
			b: 2.0;
			c: 'C';
			d: "string";
		};
	};
};
raw_identifier_string_test: {
	raw: {
		``: 0;
		`\`(.\\test\\features_test.pdn)\``: 0;
		`\\0\\a\\b\\f\\r\\n`: 0;
		`\`(.\\test\\features_test.pdn\n\t\t\tnew line!\n\t\t\tnew line 2!)\``: 0;
	};
	delimiter: {
		``: 0;
		🍓num: 0;
		`signs 1🍓`: 0;
		signs🍓2: 0;
		`uppercase🍓letters 1`: 0;
		`lowercase letters🍓1`: 0;
		`uppercase letters🍓2`: 0;
		`lowercase🍓letters 2`: 0;
	};
};
others: {
	o: {
		a: 123;
		b: 456;
		c: 789;
		d: 10;
	};
	x: {
		a: 123;
		b: 456;
		c: 789;
		d: 10;
	};
};
